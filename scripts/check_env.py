#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""
import os
from pathlib import Path

def check_env():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_path = Path(__file__).parent.parent / '.env'
    
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        return False
    
    required_vars = [
        'REMNA_PANEL_URL',
        'REMNA_API_TOKEN',
        'TELEGRAM_BOT_TOKEN',
        'ADMIN_TELEGRAM_IDS',
        'SECRET_KEY',
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    from dotenv import load_dotenv
    load_dotenv(env_path)
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value or value.startswith('your-'):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –°–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
        for var in missing_vars:
            print(f"  - {var}")
        print("\nüìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∞—Ö
    admin_ids = os.getenv('ADMIN_TELEGRAM_IDS', '')
    if admin_ids:
        ids_list = [id.strip() for id in admin_ids.split(',') if id.strip()]
        print(f"\nüë• –ê–¥–º–∏–Ω—ã: {len(ids_list)} ID(s)")
        for admin_id in ids_list:
            print(f"   - {admin_id}")
    else:
        print("\n‚ö†Ô∏è  ADMIN_TELEGRAM_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤—Å–µ–º!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Remna API
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Remna API...")
    import httpx
    
    try:
        remna_url = os.getenv('REMNA_PANEL_URL').rstrip('/')
        remna_token = os.getenv('REMNA_API_TOKEN')
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints_to_try = [
            '/api/users',          # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            '/api/system/stats',   # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–Ω–æ–≤—ã–π)
            '/api/core',           # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–¥—Ä–µ
            '/api/system',         # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            '/api/admins/current', # –¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω
        ]
        
        success = False
        for endpoint in endpoints_to_try:
            try:
                response = httpx.get(
                    f"{remna_url}{endpoint}",
                    headers={"Authorization": f"Bearer {remna_token}"},
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Remna API —É—Å–ø–µ—à–Ω–æ!")
                    print(f"   –†–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}")
                    success = True
                    break
                elif response.status_code == 401:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)")
                    print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REMNA_API_TOKEN")
                    return False
                elif response.status_code == 403:
                    print(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)")
                    print(f"   –£ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                    return False
            except httpx.ConnectError:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {remna_url}")
                print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REMNA_PANEL_URL")
                return False
            except Exception:
                continue
        
        if not success:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç")
            print(f"   –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {', '.join(endpoints_to_try)}")
            print(f"\nüí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã.")
            print(f"   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.")
            print(f"\n   –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä—É—á–Ω—É—é:")
            print(f"   curl -H 'Authorization: Bearer YOUR_TOKEN' {remna_url}/api/users")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Remna API: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REMNA_PANEL_URL –∏ REMNA_API_TOKEN")
    
    return True

if __name__ == "__main__":
    check_env()

